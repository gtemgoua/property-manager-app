// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyManager.Api.Data;

#nullable disable

namespace PropertyManager.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250921224450_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.DocumentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<Guid?>("RentPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType");

                    b.HasIndex("RentPaymentId");

                    b.ToTable("DocumentLogs");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.PaymentAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AlertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RentPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RentPaymentId");

                    b.ToTable("PaymentAlerts");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("ReceiptSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReceiptSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("RentalContractId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RentalContractId", "DueDate")
                        .IsUnique();

                    b.ToTable("RentPayments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AmountDue = 1800m,
                            AmountPaid = 0m,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DueDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LateFee = 0m,
                            PaymentMethod = 0,
                            ReceiptNumber = "RCPT-DEMO-202401",
                            ReceiptSent = false,
                            RentalContractId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentalContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PaymentDueDay")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentSchedule")
                        .HasColumnType("integer");

                    b.Property<Guid>("RentalUnitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RentalUnitId");

                    b.HasIndex("TenantId");

                    b.ToTable("RentalContracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepositAmount = 1800m,
                            MonthlyRent = 1800m,
                            PaymentDueDay = 5,
                            PaymentSchedule = 0,
                            RentalUnitId = new Guid("22222222-2222-2222-2222-222222222222"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TenantId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentalUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<double>("SquareFeet")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RentalUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AddressLine1 = "123 Main Street",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            City = "Metropolis",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MonthlyRent = 1800m,
                            Name = "Unit 101",
                            PostalCode = "94016",
                            SquareFeet = 950.0,
                            State = "CA",
                            Status = 1
                        });
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ada@example.com",
                            FirstName = "Ada",
                            LastName = "Lovelace",
                            PhoneNumber = "+11234567890"
                        });
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.DocumentLog", b =>
                {
                    b.HasOne("PropertyManager.Api.Domain.Entities.RentPayment", "RentPayment")
                        .WithMany()
                        .HasForeignKey("RentPaymentId");

                    b.Navigation("RentPayment");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.PaymentAlert", b =>
                {
                    b.HasOne("PropertyManager.Api.Domain.Entities.RentPayment", "RentPayment")
                        .WithMany()
                        .HasForeignKey("RentPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentPayment");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentPayment", b =>
                {
                    b.HasOne("PropertyManager.Api.Domain.Entities.RentalContract", "RentalContract")
                        .WithMany("Payments")
                        .HasForeignKey("RentalContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalContract");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentalContract", b =>
                {
                    b.HasOne("PropertyManager.Api.Domain.Entities.RentalUnit", "RentalUnit")
                        .WithMany("Contracts")
                        .HasForeignKey("RentalUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyManager.Api.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RentalUnit");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentalContract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.RentalUnit", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("PropertyManager.Api.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
